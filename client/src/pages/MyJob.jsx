import React, { useEffect, useState } from "react";
import Layout from "../components/Layout";
import axios from "axios";
import DataTable from "react-data-table-component";
import UtilsService from "../services/utils.service";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";

const MyJob = () => {
  const token = localStorage.getItem("token");
  const userID = jwtDecode(token).userID;
  const [post, setPost] = useState([]);
  const [error, setError] = useState("");
  const [filter, setFilter] = useState([]);
  const [search, setSearch] = useState("");
  const navigate = useNavigate();

  const formatThaiDate = (dateString) => {
    if (!dateString) return "-";

    const date = new Date(dateString);
    return date.toLocaleDateString("th-TH", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const paginationOptions = {
    rowsPerPageText: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤:", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á "Rows per page"
    rangeSeparatorText: "‡∏à‡∏≤‡∏Å", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    selectAllRowsItem: true, // ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ
    selectAllRowsItemText: "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "All"
  };

  const getStatusInfo = (status) => {
    switch (status) {
      case "NEW":
        return { text: "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", color: "bg-yellow-50 text-yellow-700" };
      case "APPROVED":
        return { text: "‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", color: "bg-green-50 text-green-700" };
      case "REJECTED":
        return { text: "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", color: "bg-red-50 text-red-700" };
      default:
        return { text: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", color: "bg-gray-400 text-white" };
    }
  };

  const customStyles = {
    headCells: {
      style: {
        backgroundColor: "oklch(0.967 0.003 264.542)",
        color: "#8a8a8a",
        fontWeight: "bold",
        fontSize: "16px",
      },
    },
  };

  const columns = [
    {
      name: "‡πÇ‡∏•‡πÇ‡∏Å‡πâ",
      selector: (row, index) => index + 1,
      sortable: true,
    },
    {
      name: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
      selector: (row) => row.jobpost.title,
    },
    {
      name: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
      selector: (row) => formatThaiDate(row.application_at),
    },
    {
      name: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
      cell: (row) => {
        const { text, color } = getStatusInfo(row.status);
        return <span className={`inline-block ${color} text-sm font-medium px-3 py-1 rounded-full`}>{text}</span>;
      },
    },
    {
      name: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
      cell: (row) => (
        <>
          <button
            className="border border-blue-900 text-blue-8 00 px-4 py-1 rounded hover:bg-blue-800 hover:text-white transition"
            onClick={() => handleAction(row)}
          >
            <i className="fa-solid fa-eye"></i>
          </button>
        </>
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
    },
  ];

  const handleAction = (row) => {
    navigate(`/post/${row.jobpost.id}`);
  };

  useEffect(() => {
    const fetchPost = async () => {
      try {
        const res = await axios.get(`http://localhost:9999/application/user/${userID}`);
        if (res.status === 200) {
          setPost(res.data);
          setFilter(res.data);
        }
      } catch (error) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå:", error);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå");
      }
    };

    fetchPost();
  }, []);

  useEffect(() => {
    const filtered = post.filter((p) => {
      const formattedDate = formatThaiDate(p.application_at);
      return formattedDate.includes(search) || p.jobpost?.title.toLowerCase().includes(search.toLowerCase());
    });
    setFilter(filtered);
  }, [search, post]);

  return (
    <Layout>
      <section className="container mx-auto">
        <div className="flex items-center justify-between mb-3">
          <div>
            <h1 className="text-blue-900 font-extrabold">My Job</h1>
            <h1 className="text-2xl font-bold">‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h1>
          </div>
          <input
            type="text"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå..."
            className="mb-2 py-1.5 px-2 border border-gray-300 rounded-md"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>
        {error && <p className="text-red-600">{error}</p>}

        <div className="shadow-lg">
          <DataTable
            className="bg-red-500"
            columns={columns}
            data={filter}
            customStyles={customStyles}
            highlightOnHover
            pagination
            paginationComponentOptions={paginationOptions}
            responsive
            noDataComponent={<p className="text-red-600 text-lg p-4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß</p>}
          />
        </div>
      </section>
    </Layout>
  );
};

export default MyJob;
